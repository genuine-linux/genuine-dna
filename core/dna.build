#!/bin/bash

echo "";
echo "$INF Starting ToolBox build in $TOOLBOX";
echo "";

source /home/$USER/.bashrc

# Build DNA ToolBox Packages
HAVE_PACKAGES=$(echo "$DNA_PACKAGES_LST");
for DNA_PACKAGE in $HAVE_PACKAGES; do
	# DNA_PACKAGE_NAME DNA_PACKAGE_VERSION SRC_PACKAGE_NAME
	DNA_PACKAGE_NAME=$(echo "$DNA_PACKAGE" | awk -F"|" '{print $1}');
	DNA_PACKAGE_VERSION=$(echo "$DNA_PACKAGE" | awk -F"|" '{print $2}');
	DNA_PACKAGE_URL=$(echo "$DNA_PACKAGE" | awk -F"|" '{print $3}');
	SRC_PACKAGE_NAME=$(echo "$DNA_PACKAGE" | awk -F"|" '{print $4}');

	export DNA_PACKAGE_NAME DNA_PACKAGE_VERSION SRC_PACKAGE_NAME
	
	if [ -f "$LOG_DIR/$DNA_PACKAGE_NAME.done" ]; then
		echo "$WRN Package $DNA_PACKAGE_NAME has been already installed!";
	else
		echo "$INF Starting package $DNA_PACKAGE_NAME build and install.";

		# Download Source Package Tarball if necessary
		if [ ! -f "$SRC_DIR/$SRC_PACKAGE_NAME" ]; then
			echo "$WRN Package $DNA_PACKAGE_VERSION will be downloaded ...";
			echo ""
			wget -c -P $SRC_DIR/ $DNA_PACKAGE_URL/$SRC_PACKAGE_NAME;
		else
			echo "$WRN Package $DNA_PACKAGE_VERSION has been already downloaded.";
		fi;
	
		# Extract Source Package
		$DNA_EXTRACT "$SRC_DIR/$SRC_PACKAGE_NAME" "$DNA_PACKAGE_VERSION";

		# Get into package source directory
		echo "$INF Change to $DNA_PACKAGE_VERSION source directory ...";
		cd $TMP_DIR/$DNA_PACKAGE_VERSION

		# Apply Package Patches if they exists.
		HAVE_PATCHES=$(echo "$DNA_PATCHES_LST" | grep ^$DNA_PACKAGE_NAME);
		if [ -n "$HAVE_PATCHES" ]; then
			echo ""
			echo "$WRN Applying $DNA_PACKAGE_NAME patches.";
			for DNA_PATCH in $HAVE_PATCHES; do
			        # DNA_PACKAGE_NAME DNA_PACKAGE_VERSION SRC_PACKAGE_NAME
       			 	DNA_PATCH_NAME=$(echo "$DNA_PATCH" | awk -F"|" '{print $1}');
       		 		DNA_PATCH_VERSION=$(echo "$DNA_PATCH" | awk -F"|" '{print $2}');
       		 		SRC_PATCH_NAME=$(echo "$DNA_PATCH" | awk -F"|" '{print $3}');
				echo "$INF Found patch: $SRC_PATCH_NAME";
				echo "$INF Checking matching package version: $DNA_PATCH_VERSION";
				if [ "$DNA_PATCH_NAME" == "$DNA_PACKAGE_NAME" ] & [ "$DNA_PATCH_VERSION" == "$DNA_PACKAGE_VERSION" ]; then
					echo "$INF Package and patch version matchs.";
					echo "$WRN Applying $DNA_PATCH_VERSION to sources.";
					patch -Np1 -i $PATCH_DIR/$SRC_PATCH_NAME
					echo ""
				else
					echo ""
					echo "$ERR Package and patch version does not match.";
					echo "$WRN Patch $SRC_PATCH_NAME was not applied.";
					echo ""
				fi;
			done;
		else
			echo "$WRN Package $DNA_PACKAGE_NAME does not have patches.";
		fi;

		# Copy Rules for building sources
		echo "$INF Copy $DNA_PACKAGE_NAME.dna file to $DNA_PACKAGE_VERSION build directory.";
		cp $DNA_RULES/$DNA_PACKAGE_NAME.dna $TMP_DIR/$DNA_PACKAGE_VERSION/$DNA_PACKAGE_NAME.dna;

		# Clear Package Build Log File
		echo "$WRN Clear $DNA_PACKAGE_NAME.log file.";
		> $LOG_DIR/$DNA_PACKAGE_NAME.log;

		# Execute Rules File and build package
		ECHO_BUILD_PKG="Building $DNA_PACKAGE_NAME from $DNA_PACKAGE_VERSION, please wait";
		chmod +x ./$DNA_PACKAGE_NAME.dna;

                count=1;
		./$DNA_PACKAGE_NAME.dna 2>&1 | tee -a $LOG_DIR/$DNA_PACKAGE_NAME.log | while read line; do
                        case $count in
                                1) echo -ne "\\r >>> [(|)] $ECHO_BUILD_PKG     ";
                                count=$((count+1));
                                ;;
                                2) echo -ne "\\r >>> [(/)] $ECHO_BUILD_PKG .   ";
                                count=$((count+1));
                                ;;
                                3) echo -ne "\\r >>> [(-)] $ECHO_BUILD_PKG ..  ";
                                count=$((count+1));
                                ;;
                                4) echo -ne "\\r >>> [(\\)] $ECHO_BUILD_PKG ... ";
                                count=1;
                                ;;
                        esac;
                done;
		
		# Check build
		CHECK_MAKE_STOP=$(tail -n 100 $LOG_DIR/$DNA_PACKAGE_NAME.log | grep "make" | grep "Stop");
		CHECK_MAKE_ERROR=$(tail -n 100 $LOG_DIR/$DNA_PACKAGE_NAME.log | grep "make" | grep "Error");
		CHECK_CONFIGURE_ERROR=$(tail -n 100 $LOG_DIR/$DNA_PACKAGE_NAME.log | grep "configure:" | grep "error:");
		if [ -z "$CHECK_MAKE_STOP" ] || [ -z "$CHECK_CONFIGURE_ERROR" ]; then
			echo -e "\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\bfinished!";
			touch $LOG_DIR/$DNA_PACKAGE_NAME.done;
		else
			echo "ERROR!!!";
			echo "$ERR While building package $DNA_PACKAGE_NAME";
			touch $LOG_DIR/$DNA_PACKAGE_NAME.error
			exit 1;
		fi;
      		
		# Clean tmp build directory 
		echo -ne "$WRN Cleaning 'tmp/$DNA_PACKAGE_VERSION' ...";
        	cd $TMP_DIR && rm -rf *;
		echo " finished!";	
	fi;

	echo "";

	unset DNA_PACKAGE_NAME DNA_PACKAGE_VERSION SRC_PACKAGE_NAME
done;

echo "$INF All packages done.";
echo ""

